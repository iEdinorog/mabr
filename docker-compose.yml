version: '3'

volumes:
  minio-data:
    driver: local
  cache:
    driver: local
  jenkins-data:
    driver: local

services:
  jekins:
    image: jenkins/jenkins
    container_name: jenkins
    ports:
      - "5000:5000"
      - "9191:8080"
    volumes:
      - jenkins-data:/var/jenkins_home

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    command: redis-server --save 20 1 --loglevel warning
    volumes:
      - cache:/data

  minio:
    image: minio/minio:latest
    container_name: minio
    env_file:
      - .env
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
    command: server ~/minio --console-address :9090
    ports:
      - '9000:9000'
      - '9090:9090'
    volumes:
      - minio-data:/minio

  postgres-user:
    image: postgres
    container_name: postgres_user
    environment:
      POSTGRES_DB: user_service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
      PG_DATA: /data/postgres
    volumes:
      - ./postgres-user:/data/postgres
    expose:
      - "5431"
    ports:
      - "5431:5431"
    command: -p 5431

  postgres-notification:
    image: postgres
    container_name: postgres_notification
    environment:
      POSTGRES_DB: notification_service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
      PG_DATA: /data/postgres
    volumes:
      - ./postgres-notification:/data/postgres
    expose:
      - "5432"
    ports:
      - "5432:5432"
    command: -p 5432

  postgres-messenger:
    image: postgres
    container_name: postgres-messenger
    environment:
      POSTGRES_DB: messenger_service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
      PG_DATA: /data/postgres
    volumes:
      - ./postgres-messenger:/data/postgres
    expose:
      - "5433"
    ports:
      - "5433:5433"
    command: -p 5433

  discovery-server:
    image: iedinorog/mabr-discovery-service
    container_name: discovery-server
    ports:
      - "8761:8761"

  api-gateway:
    image: iedinorog/mabr-api-gateway
    container_name: api-gateway
    ports:
      - "8181:8080"
    expose:
      - "8181"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - discovery-server

  authentication-service:
    image: iedinorog/mabr-authentication-service
    container_name: authentication-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - discovery-server
      - api-gateway

  user-service:
    image: iedinorog/mabr-user-service
    container_name: user-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - postgres-user
      - discovery-server
      - api-gateway

  messenger-service:
    image: iedinorog/mabr-messenger-service
    container_name: messenger-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - postgres-messenger
      - api-gateway
      - discovery-server
      - kafka
      - redis

  notification-service:
    image: iedinorog/mabr-notification-service
    container_name: notification-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - postgres-notification
      - api-gateway
      - discovery-server
      - kafka

  file-storage-service:
    image: iedinorog/mabr-file-storage-service
    container_name: file-storage-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - postgres-user
      - minio
      - api-gateway
      - discovery-server

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - user-service
      - notification-service
      - messenger-service
      - file-storage-service

  grafana:
    image: grafana/grafana-oss
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    links:
      - prometheus:prometheus
    volumes:
      - ./grafana:/var/lib/grafana
    environment:
    - GF_SECURITY_ADMIN_USER=admin
    - GF_SECURITY_ADMIN_PASSWORD=adminpassword

  elastic:
    image: elasticsearch:8.5.3
    container_name: elastic
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
    volumes:
      - elastic:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"